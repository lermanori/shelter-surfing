name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: shelter_surfing_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Dependencies (Backend)
      working-directory: ./server
      run: npm ci

    - name: Install Dependencies (Frontend)
      working-directory: ./client
      run: npm ci

    - name: Run Backend Tests
      working-directory: ./server
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/shelter_surfing_test
        JWT_SECRET: test-secret
      run: |
        npx prisma migrate deploy
        npm test

    - name: Run Frontend Tests
      working-directory: ./client
      run: npm test

    - name: Run Frontend Build
      working-directory: ./client
      run: npm run build

  deploy-backend:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Install Railway CLI
      run: npm install -g @railway/cli

    - name: Deploy to Railway
      working-directory: ./server
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: railway up

  deploy-frontend:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Dependencies
      working-directory: ./client
      run: npm ci

    - name: Build
      working-directory: ./client
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
        VITE_SOCKET_URL: ${{ secrets.VITE_SOCKET_URL }}
      run: npm run build

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v20
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./client
        vercel-args: '--prod' 